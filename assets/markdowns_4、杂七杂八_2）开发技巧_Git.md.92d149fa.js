import{_ as a,o as t,c as e,Q as o}from"./chunks/framework.867ce416.js";const b=JSON.parse('{"title":"Git 入门","description":"","frontmatter":{},"headers":[],"relativePath":"markdowns/4、杂七杂八/2）开发技巧/Git.md","filePath":"markdowns/4、杂七杂八/2）开发技巧/Git.md"}'),i={name:"markdowns/4、杂七杂八/2）开发技巧/Git.md"},s=o(`<h1 id="git-入门" tabindex="-1">Git 入门 <a class="header-anchor" href="#git-入门" aria-label="Permalink to &quot;Git 入门&quot;">​</a></h1><h2 id="版本控制软件-系统" tabindex="-1">版本控制软件（系统） <a class="header-anchor" href="#版本控制软件-系统" aria-label="Permalink to &quot;版本控制软件（系统）&quot;">​</a></h2><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211547799.png" alt="截图" style="zoom:50%;"><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211547056.png" alt="截图" style="zoom:50%;"><br><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211547640.png" alt="截图" style="zoom:50%;"><br><br><h2 id="git-概念" tabindex="-1">Git 概念 <a class="header-anchor" href="#git-概念" aria-label="Permalink to &quot;Git 概念&quot;">​</a></h2><p>Git 是一个开源的分布式版本控制系统，是目前世界上最先进、最流行的版本控制系统。可以快速高效地处理从很小到非常大的项目版本管理。</p><h3 id="git-的特性" tabindex="-1">Git 的特性 <a class="header-anchor" href="#git-的特性" aria-label="Permalink to &quot;Git 的特性&quot;">​</a></h3><ol><li>直接记录快照，而非差异比较</li><li>近乎所有的操作都是本地进行</li></ol><br><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548590.png" alt="截图" style="zoom:50%;"><br><p><strong>Git 的记录快照</strong></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548380.png" alt="截图" style="zoom:50%;"><br><p><strong>近乎所有操作都是本地执行</strong></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548263.png" alt="截图" style="zoom:50%;"><br><h3 id="git-中的三个区域" tabindex="-1">Git 中的三个区域 <a class="header-anchor" href="#git-中的三个区域" aria-label="Permalink to &quot;Git 中的三个区域&quot;">​</a></h3><p>使用 Git 管理的项目，拥有三个区域</p><ol><li>工作区</li><li>暂存区</li><li>Git 仓库</li></ol><br><h3 id="git-中的三种状态" tabindex="-1">Git 中的三种状态 <a class="header-anchor" href="#git-中的三种状态" aria-label="Permalink to &quot;Git 中的三种状态&quot;">​</a></h3><ol><li>已修改 modified</li><li>已暂存 staged</li><li>已提交 committed</li></ol><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548964.png" alt="截图" style="zoom:50%;"><br><h3 id="基本的-git-工作流程" tabindex="-1">基本的 Git 工作流程 <a class="header-anchor" href="#基本的-git-工作流程" aria-label="Permalink to &quot;基本的 Git 工作流程&quot;">​</a></h3><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548239.png" alt="截图" style="zoom:50%;"><br><br><h1 id="git-基础" tabindex="-1">Git 基础 <a class="header-anchor" href="#git-基础" aria-label="Permalink to &quot;Git 基础&quot;">​</a></h1><h2 id="配置-git" tabindex="-1">配置 Git <a class="header-anchor" href="#配置-git" aria-label="Permalink to &quot;配置 Git&quot;">​</a></h2><h3 id="配置用户信息" tabindex="-1">配置用户信息 <a class="header-anchor" href="#配置用户信息" aria-label="Permalink to &quot;配置用户信息&quot;">​</a></h3><p><code>git config --global user.name、git config --global user.email</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548339.png" alt="截图" style="zoom:50%;"><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548926.png" alt="截图" style="zoom:50%;"><br><h3 id="检查配置信息" tabindex="-1">检查配置信息 <a class="header-anchor" href="#检查配置信息" aria-label="Permalink to &quot;检查配置信息&quot;">​</a></h3><p><code>git config --list --global</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548328.png" alt="截图" style="zoom:50%;"><br><h3 id="获取帮助信息" tabindex="-1">获取帮助信息 <a class="header-anchor" href="#获取帮助信息" aria-label="Permalink to &quot;获取帮助信息&quot;">​</a></h3><p><code>git help config</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548522.png" alt="截图" style="zoom:50%;"><br><br><h2 id="git-基本操作" tabindex="-1">Git 基本操作 <a class="header-anchor" href="#git-基本操作" aria-label="Permalink to &quot;Git 基本操作&quot;">​</a></h2><h3 id="获取-git-仓库" tabindex="-1">获取 Git 仓库 <a class="header-anchor" href="#获取-git-仓库" aria-label="Permalink to &quot;获取 Git 仓库&quot;">​</a></h3><ol><li>将尚未进行版本控制的本地目录转换为 Git 仓库</li><li>从其它服务器克隆一个已存在的 Git 仓库</li></ol><br><p><strong>本地目录初始化仓库</strong></p><p><code>git init</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548602.png" alt="截图" style="zoom:50%;"><br><h3 id="git-文件状态及操作" tabindex="-1">Git 文件状态及操作 <a class="header-anchor" href="#git-文件状态及操作" aria-label="Permalink to &quot;Git 文件状态及操作&quot;">​</a></h3><p><strong>工作区中文件的四种状态</strong></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548407.png" alt="截图" style="zoom:50%;"><br><p><strong>检查文件的状态</strong></p><p><code>git status</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548148.png" alt="截图" style="zoom:50%;"><br><p><strong>以精简的方式显示文件状态</strong></p><p><code>git status -s</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548884.png" alt="截图" style="zoom:50%;"><br><p><strong>跟踪新文件</strong></p><p><code>git add **</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548610.png" alt="截图" style="zoom:50%;"><br><p><strong>提交更新</strong></p><p><code>git commit -m &quot;**&quot;</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548392.png" alt="截图" style="zoom:50%;"><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548911.png" alt="截图" style="zoom:50%;"><br><p><strong>对已提交的文件进行修改</strong></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548805.png" alt="截图" style="zoom:50%;"><br><p><strong>暂存已修改的文件</strong></p><p><code>git add ***</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548691.png" alt="截图" style="zoom:50%;"><br><p><strong>提交已暂存的文件</strong></p><p><code>git commit -m &quot;***&quot;</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548568.png" alt="截图" style="zoom:50%;"><br><p><strong>撤销对文件的修改</strong></p><p><code>git checkout -- ***</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548707.png" alt="截图" style="zoom:50%;"><br><p><strong>向暂存区中一次性添加多个文件</strong></p><p><code>git add .</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549923.png" alt="截图" style="zoom:50%;"><br><p><strong>取消暂存的文件</strong></p><p><code>git reset HEAD ***</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211548273.png" alt="截图" style="zoom:50%;"><br><p><strong>跳过使用暂存区</strong></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549063.png" alt="截图" style="zoom:50%;"><br><p><strong>移除文件</strong></p><p><code>git rm -f ***</code></p><p><code>git rm --cached ***</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549562.png" alt="截图" style="zoom:50%;"><br><p><strong>忽略文件</strong></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549052.png" alt="截图" style="zoom:50%;"><p>glob 模式</p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549398.png" alt="截图" style="zoom:50%;"><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549277.png" alt="截图" style="zoom:80%;"><br><p><strong>查看提交历史</strong></p><p><code>git log (***)</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549162.png" alt="截图" style="zoom:50%;"><br><p><strong>回退到指定的版本</strong></p><p><code>git reset --hard ***</code></p><p><strong>git reflog --pretty=oneline</strong></p><br><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549083.png" alt="截图" style="zoom:50%;"><br><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549790.png" alt="截图" style="zoom:50%;"><br><br><h1 id="github" tabindex="-1">Github <a class="header-anchor" href="#github" aria-label="Permalink to &quot;Github&quot;">​</a></h1><h2 id="开源" tabindex="-1">开源 <a class="header-anchor" href="#开源" aria-label="Permalink to &quot;开源&quot;">​</a></h2><h3 id="开源概念" tabindex="-1">开源概念 <a class="header-anchor" href="#开源概念" aria-label="Permalink to &quot;开源概念&quot;">​</a></h3><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549136.png" alt="截图" style="zoom:50%;"><br><h3 id="开源许可协议" tabindex="-1">开源许可协议 <a class="header-anchor" href="#开源许可协议" aria-label="Permalink to &quot;开源许可协议&quot;">​</a></h3><p>开源并不意味着完全没有限制，为了限制使用者的使用范围和保护作者的权利，每个开源项目都应该遵守开源许可协议（ Open Source License ) 。</p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549209.png" alt="截图" style="zoom:50%;"><br><h2 id="github-概念" tabindex="-1">Github 概念 <a class="header-anchor" href="#github-概念" aria-label="Permalink to &quot;Github 概念&quot;">​</a></h2><p>Github 是全球最大的开源项目托管平台。因为只支持 Git 作为唯一的版本控制工具，故名 GitHub。</p><br><h3 id="远程仓库的使用" tabindex="-1">远程仓库的使用 <a class="header-anchor" href="#远程仓库的使用" aria-label="Permalink to &quot;远程仓库的使用&quot;">​</a></h3><p><strong>访问方式</strong></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549546.png" alt="截图" style="zoom:50%;"><br><h3 id="基于-https-将本地仓库上传到-github" tabindex="-1">基于 HTTPS 将本地仓库上传到 GitHub <a class="header-anchor" href="#基于-https-将本地仓库上传到-github" aria-label="Permalink to &quot;基于 HTTPS 将本地仓库上传到 GitHub&quot;">​</a></h3><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549399.png" alt="截图" style="zoom:50%;"><p>后续更新需要继续推送到远程仓库：<code>git push</code></p><br><p><strong>SSH Key</strong></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549290.png" alt="截图" style="zoom:50%;"><p><strong>生成 SSH Key</strong></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549347.png" alt="截图" style="zoom:50%;"><p><strong>配置 SSH Key</strong></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549333.png" alt="截图" style="zoom:50%;"><p><strong>检测 SSH Key 是否配置成功</strong></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549084.png" alt="截图"><br><h3 id="基于-ssh-将本地仓库上传到-github" tabindex="-1">基于 SSH 将本地仓库上传到 Github <a class="header-anchor" href="#基于-ssh-将本地仓库上传到-github" aria-label="Permalink to &quot;基于 SSH 将本地仓库上传到 Github&quot;">​</a></h3><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549541.png" alt="截图" style="zoom:50%;"><p>后续更新需要继续推送到远程仓库：<code>git push</code></p><br><h3 id="将远程仓库克隆到本地" tabindex="-1">将远程仓库克隆到本地 <a class="header-anchor" href="#将远程仓库克隆到本地" aria-label="Permalink to &quot;将远程仓库克隆到本地&quot;">​</a></h3><p><code>git clone</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549707.png" alt="截图" style="zoom:50%;"><br><br><h2 id="git-分支" tabindex="-1">Git 分支 <a class="header-anchor" href="#git-分支" aria-label="Permalink to &quot;Git 分支&quot;">​</a></h2><h3 id="分支概念" tabindex="-1">分支概念 <a class="header-anchor" href="#分支概念" aria-label="Permalink to &quot;分支概念&quot;">​</a></h3><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211549838.png" alt="截图" style="zoom:50%;"><br><p><strong>master 主分支（main 主分支）</strong></p><p>作用：用来保存和记录整个项目已完成的功能代码。</p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550422.png" alt="截图" style="zoom:50%;"><br><p><strong>功能分支</strong></p><p>作用：专门用来开发新功能的分支</p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550108.png" alt="截图" style="zoom:50%;"><br><h3 id="本地分支操作" tabindex="-1">本地分支操作 <a class="header-anchor" href="#本地分支操作" aria-label="Permalink to &quot;本地分支操作&quot;">​</a></h3><p><strong>查看分支列表</strong></p><p><code>git branch</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550578.png" alt="截图" style="zoom:50%;"><br><p><strong>创建新分支</strong></p><p><code>git branch ***</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550394.png" alt="截图" style="zoom:50%;"><br><p><strong>切换分支</strong></p><p><code>git checkout ***</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550015.png" alt="截图" style="zoom:50%;"><br><p><strong>分支的快速创建和切换</strong></p><p><code>git checkout -b ***</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550070.png" alt="截图" style="zoom:50%;"><br><p><strong>合并分支</strong></p><p><code>git merge ***</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550474.png" alt="截图" style="zoom:50%;"><br><p><strong>删除本地分支</strong></p><p>要求切换到主分支且合并后才可删除：<code>git branch -d ***</code></p><p>切换到主分后未合并而强制删除：<code>git branch -D ***</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550170.png" alt="截图" style="zoom:50%;"><br><p><strong>冲突分支合并</strong></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550322.png" alt="截图" style="zoom:50%;"><ul><li>Accept Current Change 保留当前|</li><li>Accept lncoming Change 保留传入</li><li>Accept Both Changes 保留两者</li><li>Compare Changes 两者比较</li></ul><br><h3 id="远程分支操作" tabindex="-1">远程分支操作 <a class="header-anchor" href="#远程分支操作" aria-label="Permalink to &quot;远程分支操作&quot;">​</a></h3><p><strong>将本地分支推送到远程仓库</strong></p><p>第一次需要加-u 绑定：== git push -u origin XXX、（git push -u origin XXX:YYY）==</p><p>后续更新推送：<code>git push origin XXX</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550325.png" alt="截图" style="zoom:50%;"><br><p><strong>查看远程仓库中的分支列表</strong></p><p><code>git remote show ***</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550986.png" alt="截图" style="zoom:50%;"><br><p><strong>跟踪分支</strong></p><p><code>git checkout xxx</code></p><p><code>git checkout -b XXX YYY/xxx</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550680.png" alt="截图" style="zoom:50%;"><br><p><strong>拉取远程分支的最新代码</strong></p><p><code>git pull</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550784.png" alt="截图" style="zoom:50%;"><br><p><strong>删除远程分支</strong></p><p><code>git push XXX --delete</code></p><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550753.png" alt="截图" style="zoom:50%;"><br><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><img src="https://cdn.jsdelivr.net/gh/LAOVA/Typora_images@main/img/202310211550443.png" alt="截图" style="zoom:50%;"><br><h2 id="git-工程化" tabindex="-1">Git 工程化 <a class="header-anchor" href="#git-工程化" aria-label="Permalink to &quot;Git 工程化&quot;">​</a></h2><h3 id="初始化仓库-init" tabindex="-1">初始化仓库（init) <a class="header-anchor" href="#初始化仓库-init" aria-label="Permalink to &quot;初始化仓库（init)&quot;">​</a></h3><p><code> git init</code></p><br><h3 id="提交到暂存区-add" tabindex="-1">提交到暂存区（add) <a class="header-anchor" href="#提交到暂存区-add" aria-label="Permalink to &quot;提交到暂存区（add)&quot;">​</a></h3><p><code> git add .</code>/ <code> git add &lt;file&gt;</code></p><br><h3 id="查看文件状态-status" tabindex="-1">查看文件状态 （status） <a class="header-anchor" href="#查看文件状态-status" aria-label="Permalink to &quot;查看文件状态 （status）&quot;">​</a></h3><p><code> git status (-s)</code></p><br><h3 id="提交到本地仓库-commit" tabindex="-1">提交到本地仓库（commit） <a class="header-anchor" href="#提交到本地仓库-commit" aria-label="Permalink to &quot;提交到本地仓库（commit）&quot;">​</a></h3><p><code>git commit -m &quot;提交信息&quot;</code></p><br><h3 id="查看版本-log" tabindex="-1">查看版本（log） <a class="header-anchor" href="#查看版本-log" aria-label="Permalink to &quot;查看版本（log）&quot;">​</a></h3><p><code>git log</code></p><br><h3 id="回退版本-reset" tabindex="-1">回退版本（reset） <a class="header-anchor" href="#回退版本-reset" aria-label="Permalink to &quot;回退版本（reset）&quot;">​</a></h3><p><code>git reset --hard HEAD^</code>/<code>git reset --hard HEAD^^</code> (^：表示回退几个版本)</p><p>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code></p><br><h3 id="切换版本-reset" tabindex="-1">切换版本（reset） <a class="header-anchor" href="#切换版本-reset" aria-label="Permalink to &quot;切换版本（reset）&quot;">​</a></h3><p><code>git reset --hard (版本id)</code></p><br><h3 id="查看版本操作-reflog" tabindex="-1">查看版本操作（reflog） <a class="header-anchor" href="#查看版本操作-reflog" aria-label="Permalink to &quot;查看版本操作（reflog）&quot;">​</a></h3><p><code>git reflog</code></p><br><h3 id="查看文件内容变化-diff" tabindex="-1">查看文件内容变化（diff） <a class="header-anchor" href="#查看文件内容变化-diff" aria-label="Permalink to &quot;查看文件内容变化（diff）&quot;">​</a></h3><p><code>git diff</code></p><br><h3 id="撤销文件修改-状态-提交到暂存区前-restore" tabindex="-1">撤销文件修改（状态：提交到暂存区前）（restore） <a class="header-anchor" href="#撤销文件修改-状态-提交到暂存区前-restore" aria-label="Permalink to &quot;撤销文件修改（状态：提交到暂存区前）（restore）&quot;">​</a></h3><p><code>git restore &lt;file&gt;</code></p><br><h3 id="撤销文件提交-移出暂存区-restore-staged" tabindex="-1">撤销文件提交，移出暂存区（restore --staged） <a class="header-anchor" href="#撤销文件提交-移出暂存区-restore-staged" aria-label="Permalink to &quot;撤销文件提交，移出暂存区（restore --staged）&quot;">​</a></h3><p><code>git restore --staged &lt;file&gt;</code></p><br><h3 id="删除文件-更新暂存区-rm" tabindex="-1">删除文件（更新暂存区）（rm） <a class="header-anchor" href="#删除文件-更新暂存区-rm" aria-label="Permalink to &quot;删除文件（更新暂存区）（rm）&quot;">​</a></h3><p><code>git rm &lt;file&gt;</code></p><br><h3 id="创建分支-branch" tabindex="-1">创建分支（branch） <a class="header-anchor" href="#创建分支-branch" aria-label="Permalink to &quot;创建分支（branch）&quot;">​</a></h3><p><code>git branch &lt;name&gt;</code></p><br><h3 id="创建并切换分支-checkout-b" tabindex="-1">创建并切换分支（checkout -b） <a class="header-anchor" href="#创建并切换分支-checkout-b" aria-label="Permalink to &quot;创建并切换分支（checkout -b）&quot;">​</a></h3><p><code>git checkout -b &lt;name&gt;</code></p><br><h3 id="切换分支-checkout" tabindex="-1">切换分支（checkout） <a class="header-anchor" href="#切换分支-checkout" aria-label="Permalink to &quot;切换分支（checkout）&quot;">​</a></h3><p><code>git checkout &lt;name&gt;</code></p><br><h3 id="当前分区为主-合并目标分区-merge" tabindex="-1">当前分区为主，合并目标分区（merge） <a class="header-anchor" href="#当前分区为主-合并目标分区-merge" aria-label="Permalink to &quot;当前分区为主，合并目标分区（merge）&quot;">​</a></h3><p><code>git merge &lt;file&gt;</code></p><br><h3 id="删除分区-branch-d" tabindex="-1">删除分区（branch -d） <a class="header-anchor" href="#删除分区-branch-d" aria-label="Permalink to &quot;删除分区（branch -d）&quot;">​</a></h3><p><code>git branch -d &lt;name&gt;</code></p><br><h3 id="解决冲突" tabindex="-1">解决冲突 <a class="header-anchor" href="#解决冲突" aria-label="Permalink to &quot;解决冲突&quot;">​</a></h3><h4 id="先合并" tabindex="-1">先合并 <a class="header-anchor" href="#先合并" aria-label="Permalink to &quot;先合并&quot;">​</a></h4><p><code>git merge &lt;file&gt;</code></p><h4 id="再手动打开文件处理冲突内容" tabindex="-1">再手动打开文件处理冲突内容 <a class="header-anchor" href="#再手动打开文件处理冲突内容" aria-label="Permalink to &quot;再手动打开文件处理冲突内容&quot;">​</a></h4><h4 id="最后提交" tabindex="-1">最后提交 <a class="header-anchor" href="#最后提交" aria-label="Permalink to &quot;最后提交&quot;">​</a></h4><p><code>git add .</code></p><p><code>git commit -m &quot;提交消息&quot;</code></p><br><h3 id="查看分支合并图-log-graph" tabindex="-1">查看分支合并图（log --graph） <a class="header-anchor" href="#查看分支合并图-log-graph" aria-label="Permalink to &quot;查看分支合并图（log --graph）&quot;">​</a></h3><p><code>git log --graph</code></p><br><h3 id="保存-缓存-工作区状态-stash" tabindex="-1">保存（缓存）工作区状态（stash） <a class="header-anchor" href="#保存-缓存-工作区状态-stash" aria-label="Permalink to &quot;保存（缓存）工作区状态（stash）&quot;">​</a></h3><p><code>git stash</code></p><br><h3 id="查看缓存现场-stash-list" tabindex="-1">查看缓存现场（stash -list） <a class="header-anchor" href="#查看缓存现场-stash-list" aria-label="Permalink to &quot;查看缓存现场（stash -list）&quot;">​</a></h3><p><code>git stash list</code></p><br><h3 id="恢复工作区状态-stash-apply" tabindex="-1">恢复工作区状态（stash apply) <a class="header-anchor" href="#恢复工作区状态-stash-apply" aria-label="Permalink to &quot;恢复工作区状态（stash apply)&quot;">​</a></h3><p><code>git stash apply &lt;name&gt;</code>/<code>git stash pop &lt;name&gt; </code></p><p>git stash pop 会清空 stash list</p><p>git stash apply 不会清空 stash list</p><br><h3 id="忽略文件-gitnore" tabindex="-1">忽略文件（.gitnore) <a class="header-anchor" href="#忽略文件-gitnore" aria-label="Permalink to &quot;忽略文件（.gitnore)&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#DBD7CAEE;"># </span><span style="color:#BD976A;">忽略</span><span style="color:#666666;">.</span><span style="color:#BD976A;">log格式文件</span></span>
<span class="line"><span style="color:#CB7676;">*</span><span style="color:#666666;">.</span><span style="color:#BD976A;">log</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;"># </span><span style="color:#BD976A;">忽略node_modules目录</span></span>
<span class="line"><span style="color:#C98A7D99;">/</span><span style="color:#C4704F;">node_modules</span><span style="color:#C98A7D99;">/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;"># </span><span style="color:#BD976A;">保留package</span><span style="color:#666666;">.</span><span style="color:#BD976A;">json文件</span></span>
<span class="line"><span style="color:#CB7676;">!</span><span style="color:#BD976A;">package</span><span style="color:#666666;">.</span><span style="color:#BD976A;">json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">#</span><span style="color:#BD976A;">忽略所有文件</span></span>
<span class="line"><span style="color:#758575DD;">/*</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393A34;"># </span><span style="color:#B07D48;">忽略</span><span style="color:#999999;">.</span><span style="color:#B07D48;">log格式文件</span></span>
<span class="line"><span style="color:#AB5959;">*</span><span style="color:#999999;">.</span><span style="color:#B07D48;">log</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;"># </span><span style="color:#B07D48;">忽略node_modules目录</span></span>
<span class="line"><span style="color:#B5695999;">/</span><span style="color:#AB5E3F;">node_modules</span><span style="color:#B5695999;">/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;"># </span><span style="color:#B07D48;">保留package</span><span style="color:#999999;">.</span><span style="color:#B07D48;">json文件</span></span>
<span class="line"><span style="color:#AB5959;">!</span><span style="color:#B07D48;">package</span><span style="color:#999999;">.</span><span style="color:#B07D48;">json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">#</span><span style="color:#B07D48;">忽略所有文件</span></span>
<span class="line"><span style="color:#A0ADA0;">/*</span></span></code></pre></div><br><br><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><h3 id="版本回退" tabindex="-1">版本回退 <a class="header-anchor" href="#版本回退" aria-label="Permalink to &quot;版本回退&quot;">​</a></h3><h4 id="git-reset" tabindex="-1">git reset <a class="header-anchor" href="#git-reset" aria-label="Permalink to &quot;git reset&quot;">​</a></h4><p><code>git reset [&lt;mode&gt;] [&lt;commit&gt;]</code> git reset 将当前分支的 HEAD 指向给定的版本，并根据模式的不同决定是否修改 index 和 working tree。 常用的有三种模式，--soft, --mixed, --hard，如果没有给出<code>&lt;mode&gt;</code>则默认是--mixed</p><blockquote><p><strong>--soft</strong></p><p>回到上次版本提交之前，保留了此次版本文件的修改，但此次版本文件已经添加到缓存区（add 之后）</p></blockquote><p>使用<code>--soft</code>参数将会仅仅重置<code>HEAD</code>到制定的版本，不会修改 index 和 working tree</p><p>而本地文件的内容并没有发生变化，而 index 中仍然有最近一次提交的修改，这时执行 git status 会显示这些修改已经在在暂存区中了，无需再一次执行 git add</p><blockquote><p><strong>--mixed</strong></p><p>回到上次版本提交之前，保留了此次版本文件的修改，但此次版本文件还没添加到缓存区（add 之前）</p></blockquote><p>使用<code>--mixed</code>参数与--soft 的不同之处在于，--mixed 修改了 index，使其与第二个版本匹配。index 中给定 commit 之后的修改被 unstaged。 如果现在执行 git commit 将不会发生任何事，因为暂存区中没有修改，在提交之前需要再次执行 git add</p><blockquote><p><strong>--hard</strong></p><p>回到上次版本提交之后，不保留了此次版本文件的修改。</p></blockquote><p>使用<code>--hard</code>同时也会修改 working tree，也就是当前的工作目录，如果我们执行<code>git reset --hard HEAD~</code>，那么最后一次提交的修改，包括本地文件的修改都会被清除，彻底还原到上一次提交的状态且无法找回。所以在执行<code>reset --hard</code>之前一定要小心</p><br><h4 id="git-revert" tabindex="-1">git revert <a class="header-anchor" href="#git-revert" aria-label="Permalink to &quot;git revert&quot;">​</a></h4><p>使用<code>git revert</code>也能起到回退版本的作用，不同之处在于</p><ul><li><code>git revert &lt;commit&gt;</code>会回退到<code>&lt;commit&gt;</code>之前的那次提交，比如<code>git revert HEAD~3</code>会回退到最近的第 4 个提交的状态，而不是第 3 个</li><li><code>git revert</code>会产生一个新的 commit，将这次回退作为一次修改记录提交，这样的好处是不修改历史提交记录。</li></ul><br><h3 id="分支操作" tabindex="-1">分支操作 <a class="header-anchor" href="#分支操作" aria-label="Permalink to &quot;分支操作&quot;">​</a></h3><h4 id="git-cherry-pick" tabindex="-1">git cherry-pick <a class="header-anchor" href="#git-cherry-pick" aria-label="Permalink to &quot;git cherry-pick&quot;">​</a></h4><p>挑选一个我们需要的 commit 进行操作。它可以将在其他分支上的 commit 修改，移植到当前的分支。</p><pre><code>git cherry-pick xxx xxx ...
命令的作用，就是将指定的提交（commit）应用于其他分支。
</code></pre><br><h2 id="github-仓库与本地项目连接" tabindex="-1">Github 仓库与本地项目连接 <a class="header-anchor" href="#github-仓库与本地项目连接" aria-label="Permalink to &quot;Github 仓库与本地项目连接&quot;">​</a></h2><ol><li><p>在 GitHub 上创建仓库</p></li><li><p>创建本地项目</p></li><li><p>在本地项目目录初始化仓库</p></li></ol><p><code>git init</code></p><ol start="4"><li>连接仓库 (建议使用 ssh 方式)</li></ol><p><code>git remote add origin 仓库地址</code></p><ol start="5"><li>强制拉取合并</li></ol><p><code>git pull origin main —-allow-unrelated-histories</code></p><ol start="6"><li>老三样</li></ol><p><code>git add . git commit -m &#39;commit描述&#39; 或者合并上次commit 使用命令：git commit --amend -m &#39;commit描述&#39; git push origin master</code></p>`,344),r=[s];function n(l,p,c,g,d,h){return t(),e("div",null,r)}const u=a(i,[["render",n]]);export{b as __pageData,u as default};
